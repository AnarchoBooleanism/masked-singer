{"version":3,"sources":["Results.js","Home.js","Questions/Question_single_test.js","App.js","reportWebVitals.js","index.js"],"names":["Results","props","useState","mainScore","songScore1","songScore2","genre1","genre2","albumArt1","albumArt2","artistName1","artistName2","songName1","songName2","location","useLocation","class","className","state","pointsMade","totalPoints","href","Home","to","Question_Page","question","changeq","pop","setPop","rock","setRock","country","setCountry","hiphop","setHiphop","stopthis","makingitstop","history","useHistory","getRandomInt","button1","cbut1","button2","cbut2","button3","cbut3","button4","cbut4","setPopPoints","setRockPoints","setCountryPoints","setHiphopPoints","sPopPoints","sRockPoints","sCountryPoints","sHiphopPoints","currentValueButton","setButtonVal","totalQuestionsAsked","updateQuestionsNum","tRightQuestions","uright","currentGen","genUpdate","crecUpdate","max","Math","floor","random","getGenreSongList","genre","a","url","fetch","then","res","json","albums","album","items","checkAns","buttonNum","previous","prev6","console","log","prev","name","prev1","previ1","prev2","previ2","prev3","previ3","prev4","previ4","push","pathname","rerollq","correctAnswer","genres","array","i","length","j","temp","shuffleArray","buttons","randNum","artist","image","artistname","imageURL","src","useEffect","id","onClick","App","classname","exact","path","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa694b3b.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport './Results.css';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nconst Results = (props) => {\r\n    /* The results page. Takes in the argument props, which is an object\r\n    consisting of:\r\n    mainScore - The total score (a number)\r\n    songScore1, songScore2 - Highest genre score, lowest genre score, (also numbers)\r\n    genre1, genre2 - Genre name with highest score, genre name with lowest score (Strings)\r\n    albumArt1, albumArt2 - Album art for song of genre with highest score and of lowest score (Strings, as links)\r\n    artistName1, artistName2 - Artist name for song of genre with highest score and of lowest score (Strings)\r\n    songName1, songName2 - Song names for song of genre with highest score and of lowest score (Strings)\r\n    */\r\n\r\n    // Placeholder, will be created by game logic later\r\n    // TODO: Remove this, remove useState import, change finalScores references to props\r\n    const [finalScores, setFinalScores] = useState({\r\n      mainScore: -1,\r\n      songScore1: -1,\r\n      songScore2: -1,\r\n        \r\n      genre1: \"Stone\",\r\n      genre2: \"Words\",\r\n        \r\n      albumArt1: \"tempalbum1.jpg\",\r\n      albumArt2: \"tempalbum2.jpg\",\r\n        \r\n      artistName1: \"Artist 1\",\r\n      artistName2: \"Artist 2\",\r\n      songName1: \"Song 1\",\r\n      songName2: \"Song 2\"\r\n    });\r\n\r\n    let location = useLocation();\r\n\r\n    // JSX object\r\n    return (\r\n        <nav class=\"results\">\r\n            <div className=\"resultsTitle\">\r\n                <h1>You got <strong>{ location.state.pointsMade }/{location.state.totalPoints}.</strong> Congratulations!</h1>\r\n                <a href=\"/masked-singer#/question\" className=\"restart\">PLAY AGAIN</a>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Results","import { Link } from 'react-router-dom';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div className = \"gametitle\">\r\n            The Masked Singer But Not The Masked Singer\r\n\r\n            <div className=\"buttonbox\">\r\n                <Link to=\"/question\" className=\"gamestart\">START</Link>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Home;","import Answers from './Answers';\r\nimport Question from './Question';\r\nimport {useState, useEffect} from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ReactDOM from 'react-dom';\r\nimport { Redirect } from 'react-router';\r\n\r\n\r\nconst Questions = ['What year did this song come out?', 'Who wrote this song?', 'Which album is this song from?'];\r\n\r\n//name, artist, albumcover\r\n//Who sings this album?, Which album did this singer create?, What album is this? \r\n\r\nconst Question_Page = () => {\r\n    const [question, changeq] = useState(\"\");\r\n    \r\n\r\n    const [pop, setPop] = useState([])\r\n    const [rock, setRock] = useState([])\r\n    const [country, setCountry] = useState([])\r\n    const [hiphop, setHiphop] = useState([])\r\n\r\n    const [stopthis, makingitstop] = useState(false)\r\n\r\n    let history = useHistory()\r\n    \r\n\r\n\r\n    let answers = [['right answer'], 'wrong answer 1', 'wrong answer 2', 'wrong answer 3'];\r\n    var correctAnswer = getRandomInt(4)\r\n\r\n    const [button1, cbut1] = useState(\"\");\r\n    const [button2, cbut2] = useState(\"\");\r\n    const [button3, cbut3] = useState(\"\");\r\n    const [button4, cbut4] = useState(\"\");\r\n    \r\n\r\n    const [popPoints, setPopPoints] = useState(0);\r\n    const [rockPoints, setRockPoints] = useState(0);\r\n    const [countryPoints, setCountryPoints] = useState(0);\r\n    const [hiphopPoints, setHiphopPoints] = useState(0);\r\n\r\n    const [pPoints, sPopPoints] = useState(0);\r\n    const [rPoints, sRockPoints] = useState(0);\r\n    const [cPoints, sCountryPoints] = useState(0);\r\n    const [hPoints, sHiphopPoints] = useState(0);\r\n\r\n\r\n    const [currentValueButton, setButtonVal] = useState(0);\r\n    const [totalQuestionsAsked, updateQuestionsNum] = useState(0);\r\n    const [tRightQuestions, uright] = useState(0);\r\n\r\n    const [currentGen, genUpdate] = useState([])\r\n\r\n    const [crec, crecUpdate] = useState(0);\r\n    \r\n\r\n\r\n\r\n\r\n    //var name = pop[0].name\r\n\r\n    function getRandomInt(max) {\r\n        return Math.floor(Math.random() * max);\r\n      }\r\n\r\n    async function getGenreSongList(genre) {\r\n        var apikey = \"374f493dfc6d56049896a9927f2ad53f\"\r\n        \r\n        var url = `http://ws.audioscrobbler.com/2.0/?method=tag.gettopalbums&tag=${genre}&api_key=${apikey}&format=json`\r\n        const items = await fetch(url)\r\n        .then(res => res.json())\r\n        .then(json => {\r\n          //console.log(json.albums.album)\r\n          return json.albums.album\r\n        })\r\n\r\n        return items\r\n\r\n        \r\n        \r\n          \r\n    }\r\n\r\n\r\n\r\n    const shuffleArray = array => {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n          const j = Math.floor(Math.random() * (i + 1));\r\n          const temp = array[i];\r\n          array[i] = array[j];\r\n          array[j] = temp;\r\n        }\r\n      }\r\n      \r\n    const checkAns = (buttonNum) => {\r\n\r\n        updateQuestionsNum(previous => previous+1)\r\n\r\n        if (currentValueButton === buttonNum)\r\n        {\r\n            uright(prev6 => prev6+1)\r\n            console.log(\"HAHHAHHAHAHHAHAHAHHAHA\")\r\n            console.log(currentGen[0])\r\n            console.log(pop[0])\r\n            console.log(rock[0])\r\n            console.log(hiphop[0])\r\n            console.log(country[0])\r\n            crecUpdate(prev => prev+1)\r\n            if (currentGen[0].name === pop[0].name)\r\n            {\r\n                setPopPoints(prev1 => prev1+1)\r\n                console.log(\"Got a pop point\")\r\n                sPopPoints(previ1 => previ1+1)\r\n            }\r\n            else if (currentGen[0].name === rock[0].name)\r\n            {\r\n                setRockPoints(prev2 => prev2+1)\r\n                console.log(\"Got a rock point\")\r\n                sRockPoints(previ2 => previ2+1)\r\n            }\r\n            else if (currentGen[0].name === hiphop[0].name)\r\n            {\r\n                setHiphopPoints(prev3 => prev3+1)\r\n                console.log(\"Got a hiphop point\")\r\n                sHiphopPoints(previ3 => previ3+1)\r\n            }\r\n            else if (currentGen[0].name === country[0].name)\r\n            {\r\n                setCountryPoints(prev4 => prev4+1)\r\n                console.log(\"Got a country point\")\r\n                sCountryPoints(previ4 => previ4+1)\r\n            }\r\n        }\r\n\r\n        if (totalQuestionsAsked > 8)\r\n        {\r\n            \r\n            \r\n            history.push({pathname: \"/result\", state: {pointsMade: tRightQuestions, totalPoints: totalQuestionsAsked+1}})\r\n            \r\n           //this.props.history.push(\"/result\")\r\n        }\r\n\r\n        rerollq()\r\n    }\r\n\r\n    const rerollq = () => {\r\n        var correctAnswer = getRandomInt(4)\r\n        setButtonVal(correctAnswer)\r\n\r\n\r\n        var genres = [pop, rock, hiphop, country]\r\n        shuffleArray(genres)\r\n\r\n        var buttons = [cbut1, cbut2, cbut3, cbut4]\r\n\r\n        for (let i = 0; i < 4; i++){\r\n            \r\n            var randNum = getRandomInt(50)\r\n            const {name, artist, image} = genres[i][randNum]\r\n            const artistname = artist.name\r\n            const imageURL = image[2][\"#text\"]\r\n        \r\n            \r\n\r\n\r\n            \r\n            \r\n            buttons[i](\r\n            <figure>\r\n            <img src = {imageURL} />\r\n            <figcaption>{name}</figcaption>\r\n            </figure>)\r\n            \r\n            if (correctAnswer === i)\r\n            {\r\n                changeq(artistname)\r\n                genUpdate(genres[i])\r\n            }\r\n        \r\n    }\r\n\r\n\r\n        //changeq(Questions[Math.floor(Math.random()*Questions.length)])\r\n    }\r\n\r\n    const count_check = () => {\r\n\r\n    }\r\n    \r\n    useEffect(() => {\r\n        getGenreSongList(\"pop\").then(\r\n            items => {\r\n                setPop(items)\r\n            }\r\n        )\r\n        \r\n        getGenreSongList(\"rock\").then(\r\n            items => {\r\n                setRock(items)\r\n            }\r\n        )\r\n\r\n        getGenreSongList(\"country\").then(\r\n            items => {\r\n                setCountry(items)\r\n            }\r\n        )\r\n\r\n\r\n        getGenreSongList(\"hiphop\").then(\r\n            items => {\r\n                setHiphop(items)\r\n            }\r\n        )\r\n\r\n\r\n\r\n        \r\n\r\n\r\n    }, [question]);\r\n\r\n    useEffect(() =>\r\n    {\r\n        if (pop.length != 0 && rock.length != 0 && country.length != 0 && hiphop.length != 0 && stopthis == false)\r\n        {\r\n            rerollq()\r\n            makingitstop(true)\r\n        }\r\n    }, [pop, rock, country, hiphop, stopthis])\r\n\r\n    return ( \r\n        \r\n        <div className=\"QuestionPage\">\r\n            <p id='Prompt'>{question}</p>\r\n            <div>\r\n                <button id='button 1' onClick={() => checkAns(0)}>{button1}</button>\r\n                <button id='button 2' onClick={() => checkAns(1)}>{button2}</button>\r\n                <button id='button 3' onClick={() => checkAns(2)}>{button3}</button>\r\n                <button id='button 4' onClick={() => checkAns(3)}>{button4}</button>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Question_Page;","import React, { Component } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Results from './Results.js';\r\nimport Home from './Home.js';\r\nimport Question_Page from './Questions/Question_single_test';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div classname = \"App\">\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/question\">\r\n              <Question_Page />\r\n            </Route>\r\n            <Route path=\"/result\">\r\n              <Results />\r\n            </Route>\r\n          </Switch>\r\n        <div className = \"Credits\">Credits: ZotHacks 2021 Team 11</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport Question_single_test from './Questions/Question_single_test';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}